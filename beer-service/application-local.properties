# properties that will be set when using the "localmysql" profile.

spring.jpa.database=mysql
spring.datasource.url=jdbc:mysql://127.0.0.1:3306/beerservice?useUnicode=true&characterEncoding=UTF-8&serverTimezone=UTC
spring.datasource.username=beer_service
spring.datasource.password=password
#
# https://docs.spring.io/spring-boot/docs/current/reference/html/howto.html#howto-database-initialization
# 10. Database Initialization
#   An SQL database can be initialized in different ways depending on what your stack is.
#   Of course, you can also do it manually, provided the database is a separate process.
#   It is recommended to use a single mechanism for schema generation.
#
#   10.1. Initialize a Database Using JPA:
#       JPA has features for DDL generation, and these can be set up to run on startup against the database. This is controlled through two external properties:
#           - spring.jpa.generate-ddl (boolean): switches the feature on and off and is vendor independent.
#           - spring.jpa.hibernate.ddl-auto (enum): is a Hibernate feature that controls the behavior in a more fine-grained way. This feature is described in more detail later in this guide.
#
#   10.2. Initialize a Database Using Hibernate
#       You can set spring.jpa.hibernate.ddl-auto explicitly and the standard Hibernate property values are:
#           - "none",
#           - "validate",
#           - "update",
#           - "create", and
#           - "create-drop".
#       Spring Boot chooses a default value for you based on whether it thinks your database is embedded.
#       It defaults to "create-drop" if no schema manager has been detected or none in all other cases.
#       An embedded database is detected by looking at the Connection type and JDBC url.
#       "hsqldb", "h2", and "derby" are candidates, and others are not.
#       Be careful, when switching from in-memory to a ‘real’ database that you do not make assumptions about the existence of the tables and data in the new platform.
#       You either have to set ddl-auto explicitly or use one of the other mechanisms to initialize the database.
#
#   10.3. Initialize a Database using basic SQL scripts:
#       Spring Boot can automatically create the schema (DDL scripts) of your DataSource and initialize it (DML scripts).
#       It loads SQL from the standard root classpath locations:
#           - schema.sql-- and
#           - data.sql--, respectively.
#       In addition, Spring Boot processes the schema-${platform}.sql and data-${platform}.sql files (if present), where platform is the value of spring.datasource.platform.
#       This allows you to switch to database-specific scripts if necessary.
#       For example, you might choose to set it to the vendor name of the database ("hsqldb", "h2", "oracle", "mysql", "postgresql", and so on).
#
#       When only basic SQL scripts are used, Spring Boot automatically creates the schema of an embedded DataSource.
#       This behavior can be customized by using the following property:
#           spring.datasource.initialization-mode
#       For instance, if you want to always initialize the DataSource regardless of its type:
#           spring.datasource.initialization-mode=always
#       In a JPA-based app, you can choose to let Hibernate create the schema or use schema.sql--, but you cannot do both.
#       Make sure to disable spring.jpa.hibernate.ddl-auto if you use schema.sql--.
#           spring.jpa.hibernate.ddl-auto=none
#       If you are using a Higher-level Database Migration Tool, like Flyway or Liquibase, you should use them alone to create and initialize the schema.
#       Using the basic schema.sql-- and data.sql-- scripts alongside Flyway or Liquibase is not recommended and support will be removed in a future release.
#
#       By default, Spring Boot enables the fail-fast feature of the Spring JDBC initializer.
#       This means that, if the scripts cause exceptions, the application fails to start.
#       You can tune that behavior by setting spring.datasource.continue-on-error.
#
#   10.4. Initialize a Database Using R2DBC
#       ...
#
#   10.5. Initialize a Spring Batch Database
#       ...
#
#   10.6. Use a Higher-level Database Migration Tool
#       Spring Boot supports two higher-level migration tools: Flyway and Liquibase.
#
#
#       If you want to always initialize the DataSource regardless of its type:
#spring.datasource.initialization-mode=always

# https://stackoverflow.com/questions/42135114/how-does-spring-jpa-hibernate-ddl-auto-property-exactly-work-in-spring
# Spring provides a JPA-specific property which Hibernate uses for DDL generation: spring.jpa.hibernate.ddl-auto.
# For the record, the "spring.jpa.hibernate.ddl-auto" property is "Spring Data JPA" specific and is their way to specify a value that will eventually be passed to Hibernate under the property it knows, "hibernate.hbm2ddl.auto".
#
# The values "create", "create-drop", "validate", and "update" basically influence how the schema tool management will manipulate the database schema at startup.
#
# For example, the "update" operation will query the JDBC driver's API to get the database metadata and then Hibernate compares the object model it creates based on reading your annotated classes or HBM XML mappings and will attempt to adjust the schema on-the-fly.
# The "update" operation for example will attempt to add new columns, constraints, etc but will never remove a column or constraint that may have existed previously but no longer does as part of the object model from a prior run.
#
# Typically in test case scenarios, you'll likely use "create-drop" so that you create your schema, your test case adds some mock data, you run your tests, and then during the test case cleanup, the schema objects are dropped, leaving an empty database.
#
# In development, it's often common to see developers use "update" to automatically modify the schema to add new additions upon restart. But again understand, this does not remove a column or constraint that may exist from previous executions that is no longer necessary.
#
# Applications can use "validate" in production, but typically that should be a setting you use in your quality/test environment to verify that the database scripts you've written or applied to your database migration tool are accurate.
# Another reason not to use "validate" in production is that it could be a bottleneck during the startup process of your application, particularly if your object model is quite extensive in size or if other network related factors come into play.
#
# In production, it's often highly recommended you use "none" or simply don't specify this property. That is because it's common practice for DBAs to review migration scripts for database changes, particularly if your database is shared across multiple services and applications.
#
# SUM UP (depending on the case, the "spring.jpa.hibernate.ddl-auto" property should take the following values):
#   - test: "create-drop" (the schema and data will be created and destroyed after tests are performed).
#   - development: "update" (caution: it will not drop/alter previous tables/columns that are not inlined with the new schema).
#   - QA: "validate"  (validates the schema, makes no changes to the underlying database).
#   - Production: "none"
#
#
# To sum up (καθορίζει το πως θα δημιουργηθεί το σχήμα της υποκείμενης βάσης δεδομένων):
#   - create: Hibernate first drops existing tables, then creates new tables.
#   - update (Development): the object model created based on the mappings (annotations or XML) is compared with the existing schema, and then Hibernate updates the schema according to the diff. It never deletes the existing tables or columns even if they are no more required by the application.
#   - create-drop (Testing): similar to create, with the addition that Hibernate will drop the database after all operations are completed. Typically used for unit testing.
#   - validate (QA): Hibernate only validates whether the tables and columns exist, otherwise it throws an exception.
#   - none (Production): this value effectively turns off the DDL generation.
#
# Δεδομένα μπορεί να φορτωθούν μέσω ενός data.sql-- file το οποίο πρέπει να είναι στο classpath. Εναλλακτικοί τρόποι περιγράφονται και εδώ: https://www.baeldung.com/spring-boot-data-sql-and-schema-sql .
# Για να δημιουργηθεί το σχήμα της βάσης χρησιμοποιώντας ένα sql αρχείο (προϋποθέτει το spring.jpa.hibernate.ddl-auto=none), δες το σχόλιο εδώ: resources/schema.sql-- . Εναλλακτικά μπορεί να χρησιμοποιηθεί το Flyweight lib (i.e. database schema migrations).
# create it and update it, if there are any changes.
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect
#spring.jpa.database-platform=org.hibernate.dialect.MySQL8Dialect # This is the name of the database, e.g. mysql, oracle, etc. it has nothing to do with the dialect!

# MySQL default max connections is 150, if your app happen to need more than that we will start getting exceptions, and you need to configure MySQl to accept more.

spring.datasource.hikari.maximum-pool-size=5
# Hikari recommended settings for MySQL:
spring.datasource.hikari.data-source-properties.cachePrepStmts=true
spring.datasource.hikari.data-source-properties.prepStmtCacheSize=250
spring.datasource.hikari.data-source-properties.prepStmtCacheSqlLimit=2048
spring.datasource.hikari.data-source-properties.useServerPrepStmts=true
spring.datasource.hikari.data-source-properties.useLocalSessionState=true
spring.datasource.hikari.data-source-properties.rewriteBatchedStatements=true
spring.datasource.hikari.data-source-properties.cacheResultSetMetadata=true
spring.datasource.hikari.data-source-properties.cacheServerConfiguration=true
spring.datasource.hikari.data-source-properties.elideSetAutoCommits=true
spring.datasource.hikari.data-source-properties.maintainTimeStats=false

# Enable logging for config troubleshooting
#logging.level.org.hibernate.SQL=DEBUG
#logging.level.com.zaxxer.hikari.HikariConfig=DEBUG
#logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
